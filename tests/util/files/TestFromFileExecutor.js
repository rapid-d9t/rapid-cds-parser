const {promises: fs} = require('fs');
const {sep: PATH_SEPARATOR} = require('path');
const parser = require('../../..');

/**
 * Executes tests defined in ./mockdata
 */
class TestFromFileExecutor {
  /**
   * @public
   */
  constructor() {
    /**
     * @private
     */
    this.positiveTestsRootDirectory = this.joinFilePath(
        ['.', 'tests', 'util', 'files', 'mockdata', 'positive'],
    );

    /**
     * @private
     */
    this.negativeTestsRootDirectory = this.joinFilePath(
        ['.', 'tests', 'util', 'files', 'mockdata', 'negative'],
    );
  }

  /**
   * @public
   */
  async executePositiveTests() {
    const testDirectories = await this
        .loadTestsFromDirectories(this.positiveTestsRootDirectory);

    await Promise.all(
        testDirectories.map((testPath) => this.executePositiveTest(testPath)),
    );
  }

  /**
   * @param {string} path Tests Root Path
   * @return {Array<string>} Test directories names
   * @private
   */
  async loadTestsFromDirectories(path) {
    return fs.readdir(path);
  }

  /**
   * @param {string} testPath Test directory path
   * @private
   */
  async executePositiveTest(testPath) {
    const parserIR = this.parseIndex(testPath);

    const correctIR = await this.loadIRfromJson(testPath);

    expect(parserIR).toEqual(correctIR);
  }

  /**
   * @param {string} testPath Test directory path
   * @return {object} IR generated by parser
   * @private
   */
  parseIndex(testPath) {
    const indexPath = this.joinFilePath(
        [this.positiveTestsRootDirectory, testPath, 'index.cds'],
    );
    return parser.generateIR(indexPath);
  }

  /**
   * @param {string} testPath Test directory path
   * @return {object} correct IR
   * @private
   */
  async loadIRfromJson(testPath) {
    const IRPath = this.joinFilePath(
        [this.positiveTestsRootDirectory, testPath, 'expectedIR.json'],
    );
    const data = await fs.readFile(IRPath);
    return JSON.parse(data);
  }

  /**
   * @public
   */
  async executeNegativeTests() {
    const testDirectories = await this
        .loadTestsFromDirectories(this.negativeTestsRootDirectory);

    testDirectories.forEach((testPath) => this.executeNegativeTest(testPath));
  }

  /**
   * @param {string} testPath Test directory path
   * @private
   */
  executeNegativeTest(testPath) {
    const indexPath = this.joinFilePath(
        [this.negativeTestsRootDirectory, testPath, 'index.cds'],
    );

    expect(() => {
      parser.generateIR(indexPath);
    }).toThrow();
  }

  /**
   * @param {Array<string>} pathComponents Components of Path
   * @return {string} Entry Path
   * @private
   */
  joinFilePath(pathComponents) {
    return pathComponents.join(PATH_SEPARATOR);
  }
}

module.exports = TestFromFileExecutor;
