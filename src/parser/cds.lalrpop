use crate::parser::ast::traits::service_usable_term::ServiceUsableTerm;
use crate::parser::ast::traits::module_usable_term::ModuleUsableTerm;
use crate::parser::ast::traits::ast_term::ASTTerm;
use crate::parser::ast::name_term::NameTerm;
use crate::parser::ast::type_term::TypeTerm;
use crate::parser::ast::param_term::ParamTerm;
use crate::parser::ast::returns_term::ReturnsTerm;
use crate::parser::ast::field_term::FieldTerm;
use crate::parser::ast::function_term::FunctionTerm;
use crate::parser::ast::action_term::ActionTerm;
use crate::parser::ast::entity_term::EntityTerm;
use crate::parser::ast::service_term::ServiceTerm;
use crate::parser::ast::module_term::ModuleTerm;

grammar;

pub Module: ModuleTerm = {
    <definitions:ModuleDefinitions> => {
        ModuleTerm::new(definitions)
    },
}

ModuleDefinitions: Vec<Box<dyn ModuleUsableTerm>> = {
    <entity:Entity> => {
        let mut definitions: Vec<Box<dyn ModuleUsableTerm>> = Vec::new();
        definitions.push(Box::new(entity));
        definitions
    },
    <service:Service> => {
        let mut definitions: Vec<Box<dyn ModuleUsableTerm>> = Vec::new();
        definitions.push(Box::new(service));
        definitions
    },
    <type_definition:Type> => {
        let mut definitions: Vec<Box<dyn ModuleUsableTerm>> = Vec::new();
        definitions.push(Box::new(type_definition));
        definitions
    },
    <definitions:ModuleDefinitions> <entity:Entity> => {
        let mut new_definitions = Vec::new();
        new_definitions.extend(definitions);
        new_definitions.push(Box::new(entity));
        new_definitions
    },
    <definitions:ModuleDefinitions> <service:Service> => {
        let mut new_definitions = Vec::new();
        new_definitions.extend(definitions);
        new_definitions.push(Box::new(service));
        new_definitions
    },
    <definitions:ModuleDefinitions> <type_definition:Type> => {
        let mut new_definitions = Vec::new();
        new_definitions.extend(definitions);
        new_definitions.push(Box::new(type_definition));
        new_definitions
    }
}

Service: ServiceTerm = {
    "service" <name:Name> "{" "}" => {
        ServiceTerm::new(name, Vec::new(), Vec::new())
    },
    "service" <name:Name> "{" <definitions:ServiceDefinitions> "}" => {
        ServiceTerm::new(name, Vec::new(), definitions)
    },
    "service" <name:Name> ":" <aspects:AspectNames> "{" "}" => {
        ServiceTerm::new(name, aspects, Vec::new())
    },
    "service" <name:Name> ":" <aspects:AspectNames> "{" <definitions:ServiceDefinitions> "}" => {
        ServiceTerm::new(name, aspects, definitions)
    }
}

ServiceDefinitions: Vec<Box<dyn ServiceUsableTerm>> = {
    <entity:Entity> => {
        let mut definitions: Vec<Box<dyn ServiceUsableTerm>> = Vec::new();
        definitions.push(Box::new(entity));
        definitions
    },
    <action:Action> => {
        let mut definitions: Vec<Box<dyn ServiceUsableTerm>> = Vec::new();
        definitions.push(Box::new(action));
        definitions
    },
    <function:Function> => {
        let mut definitions: Vec<Box<dyn ServiceUsableTerm>> = Vec::new();
        definitions.push(Box::new(function));
        definitions
    },
    <type_definition:Type> => {
        let mut definitions: Vec<Box<dyn ServiceUsableTerm>> = Vec::new();
        definitions.push(Box::new(type_definition));
        definitions
    },
    <definitions:ServiceDefinitions> <entity:Entity> => {
        let mut new_definitions = Vec::new();
        new_definitions.extend(definitions);
        new_definitions.push(Box::new(entity));
        new_definitions
    },
    <definitions:ServiceDefinitions> <action:Action> => {
        let mut new_definitions = Vec::new();
        new_definitions.extend(definitions);
        new_definitions.push(Box::new(action));
        new_definitions
    },
    <definitions:ServiceDefinitions> <function:Function> => {
        let mut new_definitions = Vec::new();
        new_definitions.extend(definitions);
        new_definitions.push(Box::new(function));
        new_definitions
    },
    <definitions:ServiceDefinitions> <type_definition:Type> => {
        let mut new_definitions = Vec::new();
        new_definitions.extend(definitions);
        new_definitions.push(Box::new(type_definition));
        new_definitions
    },
}

Entity: EntityTerm = {
    "entity" <name:Name> "{" "}" => {
        EntityTerm::new(name, Vec::new(), Vec::new())
    },
    "entity" <name:Name> "{" <fields:Fields> "}" => {
        EntityTerm::new(name, Vec::new(), fields)
    },
    "entity" <name:Name> ":" <aspects:AspectNames> "{" "}" => {
        EntityTerm::new(name, aspects, Vec::new())
    },
    "entity" <name:Name> ":" <aspects:AspectNames> "{" <fields:Fields> "}" => {
        EntityTerm::new(name, aspects, fields)
    }
}

AspectNames: Vec<NameTerm> = {
    <aspect_name:Name> => {
        let mut aspect_names = Vec::new();
        aspect_names.push(aspect_name);
        aspect_names
    },
    <aspect_names:AspectNames> "," <aspect_name:Name> => {
        let mut new_aspect_names = Vec::new();
        new_aspect_names.extend(aspect_names);
        new_aspect_names.push(aspect_name);
        new_aspect_names
    }
}

Fields: Vec<FieldTerm> = {
    <field:Field> => {
        let mut fields = Vec::new();
        fields.push(field);
        fields
    },
    <fields:Fields> <field:Field> => {
        let mut new_fields = Vec::new();
        new_fields.extend(fields);
        new_fields.push(field);
        new_fields
    }
}

Field: FieldTerm = {
    <name:Name> ":" <type_name:Name> ";" => FieldTerm::new(name, type_name)
}

Action: ActionTerm = {
    "action" <name:Name> "(" <params:Params> ")" ";" => {
        ActionTerm::new(name, params, None)
    },
    "action" <name:Name> "(" <params:Params> ")" "returns" <returns:Returns> ";" => {
        ActionTerm::new(name, params, Some(returns))
    }
};

Function: FunctionTerm = {
    "function" <name:Name> "(" ")" "returns" <returns:Returns> ";" => {
        FunctionTerm::new(name, Vec::new(), returns)
    },
    "function" <name:Name> "(" <params:Params> ")" "returns" <returns:Returns> ";" => {
        FunctionTerm::new(name, params, returns)
    }
};

Returns: ReturnsTerm = {
    <name:Name> => ReturnsTerm::new(name),
    "array" "of" <name:Name> => ReturnsTerm::new_arrayed(name),
}

Params: Vec<ParamTerm> = {
    <param:Param> => {
        let mut params = Vec::new();
        params.push(param);
        params
    },
    <params:Params> <param:Param> => {
        let mut new_params = Vec::new();
        new_params.extend(params);
        new_params.push(param);
        new_params
    },
}

Param: ParamTerm = {
    <name:Name> ":" <type_name:Name> => ParamTerm::new(name, type_name)
}

Type: TypeTerm = {
    "define" "type" <name:Name> ":" <resolved_type_name:Name> ";" => {
        TypeTerm::new(name, resolved_type_name)
    },
    "type" <name:Name> ":" <resolved_type_name:Name> ";" => {
        TypeTerm::new(name, resolved_type_name)
    }
}

Name: NameTerm = {
    <value:r"[a-zA-Z0-9-]+"> => NameTerm::new(value.to_string())
}
